/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package retail.software;

import java.sql.*;
import Project.connectionProvider;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javax.swing.JOptionPane;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Gnaneshwaar
 */
public class billingFrame extends javax.swing.JFrame {

    public float finalTotal = 0;

    /**
     * Creates new form billingFrame
     */
    public billingFrame() {
        initComponents();
        searchCustomerfield.requestFocus();
        SimpleDateFormat dFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        jDateChooser1.setDate(date);

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        //jLabel5.setText(dtf.format(now));
        

        //for searching products
        ArrayList<String> words = new ArrayList<>();
        try {
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select productname from product");
            while (rs.next()) {
                words.add(rs.getString(1));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        AutoSuggestor autoSuggestor = new AutoSuggestor(jTextField4, this, null, Color.WHITE.brighter(), Color.BLUE, Color.RED, 0.75f) {
            boolean wordTyped(String typedWord) {

                setDictionary(words);
                return super.wordTyped(typedWord);//now call super to check for any matches against newest dictionary
            }
        };
        
        
        //for searching customer
        ArrayList<String> words1 = new ArrayList<>();
        try {
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rss = st.executeQuery("select name from customer");
            while (rss.next()) {
                words1.add(rss.getString(1));
            }
        } catch (Exception e1) {
            JOptionPane.showMessageDialog(null, e1.getMessage());
        }
        AutoSuggestor autoSuggestor1 = new AutoSuggestor(searchCustomerfield, this, null, Color.WHITE.brighter(), Color.BLUE, Color.RED, 0.75f) {
            boolean wordTyped(String typedWord1) {

                setDictionary(words1);
                return super.wordTyped(typedWord1);//now call super to check for any matches against newest dictionary
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        searchCustomerfield = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Montserrat SemiBold", 0, 55)); // NOI18N
        jLabel1.setText("Billing. ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 26, -1, 76));

        jLabel2.setFont(new java.awt.Font("Montserrat SemiBold", 0, 18)); // NOI18N
        jLabel2.setText("Date");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 60, 83, 36));

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 118, 1218, 10));

        jLabel6.setFont(new java.awt.Font("Montserrat SemiBold", 0, 19)); // NOI18N
        jLabel6.setText("Buyer Details");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 134, 144, 33));

        jLabel7.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel7.setText("Customer Name");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(34, 173, 127, 33));

        searchCustomerfield.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        searchCustomerfield.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        searchCustomerfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchCustomerfieldFocusGained(evt);
            }
        });
        searchCustomerfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerfieldActionPerformed(evt);
            }
        });
        searchCustomerfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchCustomerfieldKeyReleased(evt);
            }
        });
        jPanel1.add(searchCustomerfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 170, 33));

        jLabel8.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel8.setText("ContactNo");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 170, -1, 33));

        jTextField2.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 170, 177, 33));

        jLabel9.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel9.setText("Address");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 170, 67, 33));

        jTextField3.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1058, 173, 170, 33));

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 224, 1218, -1));

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jButton1.setText("+");
        jButton1.setNextFocusableComponent(jTextField4);
        jButton1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton1FocusGained(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1124, 332, -1, 28));

        jLabel10.setFont(new java.awt.Font("Montserrat SemiBold", 0, 18)); // NOI18N
        jLabel10.setText("Product Details:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 244, 168, 34));

        jLabel11.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel11.setText("Product Name:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 285, 113, 33));

        jTextField4.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jTextField4.setNextFocusableComponent(jTextField6);
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
        });
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 285, 148, 33));

        jLabel12.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel12.setText("Price:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 285, 45, 33));

        jLabel13.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel13.setText("Qty/units:");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1042, 285, 72, 33));

        jTextField5.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(379, 285, 105, 33));

        jTextField6.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1116, 285, 112, 33));

        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 366, 1218, 10));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "S.No", "Product Name", "HSN Code", "Quantity/units", "Price", "CGST", "SGST", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 390, 804, 320));

        jLabel14.setFont(new java.awt.Font("Montserrat SemiBold", 0, 18)); // NOI18N
        jLabel14.setText("Calculation Details:");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 390, 191, 35));

        jLabel15.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jLabel15.setText("Price");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 430, 128, 30));

        jLabel16.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jLabel16.setText("Amount Paid");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 570, 128, 30));

        jLabel17.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jLabel17.setText("Return Amount");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 620, -1, 30));

        jTextField7.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 430, 140, -1));

        jTextField8.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField8KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField8KeyTyped(evt);
            }
        });
        jPanel1.add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 570, 140, -1));

        jTextField9.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jPanel1.add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 620, 140, -1));

        jButton2.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jButton2.setText("RESET");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 670, -1, 36));

        jButton3.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jButton3.setText("SAVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 670, -1, 36));

        jButton4.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jButton4.setText("CLOSE.");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 670, -1, 36));

        jButton5.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jButton5.setText("PRINT");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 670, -1, 36));

        jLabel18.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel18.setText("HSN Code:");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(488, 285, 82, 33));

        jTextField1.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(574, 284, 92, 34));

        jLabel19.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel19.setText("CGST:");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 284, 54, 34));

        jTextField10.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField10, new org.netbeans.lib.awtextra.AbsoluteConstraints(748, 284, 102, 34));

        jLabel20.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel20.setText("SGST:");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(874, 284, 58, 34));

        jTextField11.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField11, new org.netbeans.lib.awtextra.AbsoluteConstraints(936, 284, 88, 34));

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setFont(new java.awt.Font("Montserrat SemiBold", 0, 12)); // NOI18N
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("-");
        jButton8.setNextFocusableComponent(jTextField4);
        jButton8.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton8FocusGained(evt);
            }
        });
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(1173, 332, -1, 28));

        jLabel21.setFont(new java.awt.Font("Montserrat SemiBold", 0, 18)); // NOI18N
        jLabel21.setText("Invoice Number:");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 165, 43));

        jLabel22.setFont(new java.awt.Font("Montserrat SemiBold", 0, 18)); // NOI18N
        jLabel22.setText("none");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 20, 80, 40));

        jLabel24.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jLabel24.setText("GST No(wholesale)");
        jPanel1.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 170, -1, 30));

        jTextField12.setFont(new java.awt.Font("Montserrat SemiBold", 0, 14)); // NOI18N
        jPanel1.add(jTextField12, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 170, 210, 40));

        jLabel23.setText("jLabel23");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2920, -250, -1, -1));

        jLabel26.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jLabel26.setText("Discount");
        jPanel1.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 480, -1, -1));

        jTextField13.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jTextField13.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField13FocusLost(evt);
            }
        });
        jTextField13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField13KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField13KeyTyped(evt);
            }
        });
        jPanel1.add(jTextField13, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 470, 140, 30));

        jLabel28.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jLabel28.setText("Net Price");
        jPanel1.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 530, 110, 20));

        jTextField14.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jPanel1.add(jTextField14, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 520, 140, 30));

        jDateChooser1.setFont(new java.awt.Font("Montserrat SemiBold", 0, 16)); // NOI18N
        jPanel1.add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 60, 180, 30));

        jComboBox1.setFont(new java.awt.Font("Montserrat SemiBold", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "R", "W" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });
        jPanel1.add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 70, 70, 30));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/retail/software/low_poly_geometric_background_2201.jpg"))); // NOI18N
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-440, -40, 1780, 1280));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1310, 720));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jButton3.doClick();
        if (Desktop.isDesktopSupported()) {
            try {
                String pdfname = jLabel22.getText();
                File myFile = new File("C:\\doc\\" + pdfname + ".pdf");
                Desktop.getDesktop().open(myFile);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed
    int originalQuantity = 0;
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int j = 0; j < jTable1.getRowCount(); j++) {
            String name = jTable1.getValueAt(j, 1).toString();
            String pname = name.trim();
            String qt = jTable1.getValueAt(j, 3).toString();

            try {
                Connection con = connectionProvider.getCon();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("SELECT Quantity FROM product WHERE productname = '" + pname + "'");
                while (rs.next()) {
                    originalQuantity = rs.getInt(1);
                }
                float iq = Float.parseFloat(qt);
                float currentQty = originalQuantity - iq;
                st.executeUpdate("UPDATE product SET Quantity = '" + currentQty + "' WHERE productname = '" + pname + "'");

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }

        }
        String invoiceNo = jLabel22.getText();
        String name = searchCustomerfield.getText();
        String path = "C:\\doc\\";
        SimpleDateFormat dFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date date = new Date();
        String rdate = dFormat.format(jDateChooser1.getDate());
        com.itextpdf.text.Document doc = new com.itextpdf.text.Document();
        try {
            PdfWriter.getInstance(doc, new FileOutputStream(path + "" + invoiceNo + "" + ".pdf"));
            doc.open();
            Font f1 = new Font(Font.FontFamily.COURIER, 10, Font.BOLD);
            Font f2 = new Font(Font.FontFamily.COURIER, 10, Font.BOLD);
            Paragraph paragraph1 = new Paragraph("***************************************************************************************\nINVOICE NUMBER: " + invoiceNo + " ", f1);
            doc.add(paragraph1);
            Paragraph paragraph2 = new Paragraph("Date: " + rdate + "\n" + "\n\n" + "Customer Name: " + searchCustomerfield.getText() + "\n" + "Contact Number: " + jTextField2.getText() + "\n" + "Address: " + jTextField3.getText() + "\n" + "Customer GST No: " + jTextField12.getText() + "\n\n\n", f1);
            doc.add(paragraph2);
            PdfPTable tb1 = new PdfPTable(8);
            tb1.setWidthPercentage(100);

            tb1.addCell(new PdfPCell(new Phrase("SNo", f1)));
            tb1.addCell(new PdfPCell(new Phrase("Product Name", f1)));
            tb1.addCell(new PdfPCell(new Phrase("HSN Code", f1)));
            tb1.addCell(new PdfPCell(new Phrase("Price", f1)));
            tb1.addCell(new PdfPCell(new Phrase("Qty", f1)));
            tb1.addCell(new PdfPCell(new Phrase("CGST", f1)));
            tb1.addCell(new PdfPCell(new Phrase("SGST", f1)));
            tb1.addCell(new PdfPCell(new Phrase("Total", f1)));
            tb1.setWidths(new float[]{1, 4, 1, 1, 1, 1, 1, 1});

            for (int i = 0; i < jTable1.getRowCount(); i++) {
                String sNo = jTable1.getValueAt(i, 0).toString();
                String na = jTable1.getValueAt(i, 1).toString();
                String hsn = jTable1.getValueAt(i, 2).toString();
                String q = jTable1.getValueAt(i, 3).toString();
                String cgst = jTable1.getValueAt(i, 5).toString();
                String sgst = jTable1.getValueAt(i, 6).toString();
                String p = jTable1.getValueAt(i, 4).toString();
                String s = jTable1.getValueAt(i, 7).toString();
                String n = na.strip();
                tb1.addCell(new PdfPCell(new Phrase(sNo, f2)));
                tb1.addCell(new PdfPCell(new Phrase(n, f2)));
                tb1.addCell(new PdfPCell(new Phrase(hsn, f2)));
                tb1.addCell(new PdfPCell(new Phrase(p, f2)));
                tb1.addCell(new PdfPCell(new Phrase(q, f2)));
                tb1.addCell(new PdfPCell(new Phrase(cgst, f2)));
                tb1.addCell(new PdfPCell(new Phrase(sgst, f2)));
                tb1.addCell(new PdfPCell(new Phrase(s, f2)));

                //Updating the sales report.
                try {
                    Connection con = connectionProvider.getCon();
                    Statement st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
                    java.util.Date pdate = new java.util.Date();
                    java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                    String saletype = jComboBox1.getSelectedItem().toString();
                    ResultSet avail = st.executeQuery("SELECT COUNT(*) from sales WHERE product='" + n + "' AND ord_date='" + sqlDate + "'AND saletype = '"+saletype+"';");
                    avail.next();
                    String selltype = jComboBox1.getSelectedItem().toString();

                    if (avail.getInt(1) > 0) {
                        float prev_quan = 0;
                        ResultSet rs = st.executeQuery("SELECT sales FROM sales WHERE product = '" + n + "' AND ord_date='" + sqlDate + "' AND saletype = '"+saletype+"';");
                        while (rs.next()) {
                            prev_quan = rs.getFloat(1);
                        }
                        float current_sales = Float.parseFloat(q);
                        float tot_sales = prev_quan + current_sales;

                        st.executeUpdate("UPDATE sales SET sales = '" + tot_sales + "' WHERE product = '" + n + "' AND ord_date = '" + sqlDate + "' AND saletype = '"+saletype+"';");

                    } else {

                        int unino = 0;
                        ResultSet rs = st.executeQuery("SELECT max(unino) FROM sales");
                        if (rs.first()) {
                            unino = rs.getInt(1);
                            unino = unino + 1;
                        }
                        rs = st.executeQuery("SELECT buyprice FROM product WHERE productname = '" + n + "'");
                        rs.next();
                        float buyprice = rs.getFloat(1);
                        float sellprice = Float.parseFloat(p);
                        float profit = sellprice - buyprice;
                        

                        st.executeUpdate("INSERT INTO sales VALUES('" + unino + "', '" + n + "', '" + sqlDate + "', '" + q + "', '" + profit + "', '" + selltype + "', '"+sellprice+"') ;");
                    }

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }

            }
            doc.add(tb1);
            Paragraph paragraph3 = new Paragraph("\nPRICE: " + jTextField7.getText() + "\n" + "DISCOUNT PRICE: " + jTextField13.getText() + "\n" + "NET PRICE: " + jTextField14.getText() + "\n\n", f1);
            doc.add(paragraph3);
            Paragraph paragraph5 = new Paragraph("S.M.Tamil Azhagi Agency\nGSTIN: 33EORPS9721F1ZE\n664, Musilam Sunnath Samathi Pallivasal Complex,NallRoad, Kavindapadi,\nPIN:638455 \nContact Number: 9715012543", f2);
            doc.add(paragraph5);
            Paragraph paragraph6 = new Paragraph("                     Thank You for visiting us, Please come again\n***************************************************************************************\n", f1);
            doc.add(paragraph6);

            JOptionPane.showMessageDialog(null, "Bill Generated!");
            setVisible(false);
            new billingFrame().setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        doc.close();

        try {
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            st.executeUpdate("INSERT INTO billstorage VALUES('" + invoiceNo + "')");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        setVisible(false);
        new billingFrame().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField8KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyTyped
        if (!Character.isDigit(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_jTextField8KeyTyped

    private void jTextField8KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyReleased
        if (!"".equals(jTextField8.getText()) && !"".equals(jTextField14.getText())) {
            float total = Float.parseFloat(jTextField14.getText());
            float amount = Float.parseFloat(jTextField8.getText());
            if (amount >= total) {
                jTextField9.setText("" + (amount - total));
            }
        }
    }//GEN-LAST:event_jTextField8KeyReleased

    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusGained
        String pname = jTextField4.getText();
        String productname = pname.trim();
        try {
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM product WHERE productname = '" + productname + "'");
            String selltype = jComboBox1.getSelectedItem().toString();
            if (selltype == "W") {
                if (rs.next()) {
                    jTextField5.setText(rs.getString(10));
                    jTextField1.setText(rs.getString(6));
                    jTextField10.setText(rs.getString(11));
                    jTextField11.setText(rs.getString(12));
                    
                    jTextField6.setText("");

                } else {
                    jTextField5.setText("");
                    jTextField6.setText("");
                    jTextField1.setText("");
                    jTextField10.setText("");
                    jTextField11.setText("");
                }
            } else {
                if (rs.next()) {
                    jTextField5.setText(rs.getString(3));
                    jTextField1.setText(rs.getString(6));
                    jTextField10.setText(rs.getString(7));
                    jTextField11.setText(rs.getString(8));
                    jTextField6.setText("");
                } else {
                    jTextField5.setText("");
                    jTextField6.setText("");
                    jTextField1.setText("");
                    jTextField10.setText("");
                    jTextField11.setText("");
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_jTextField4FocusGained

    private void jButton1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton1FocusGained

    }//GEN-LAST:event_jButton1FocusGained

    private void searchCustomerfieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchCustomerfieldKeyReleased
//        String contactnumber = searchCustomerfield.getText();
//        try {
//            Connection con = connectionProvider.getCon();
//            Statement st = con.createStatement();
//            ResultSet rs = st.executeQuery("SELECT * FROM customer WHERE contactnumber = '" + contactnumber + "'");
//            if (rs.next()) {
//                jTextField2.setText(rs.getString(1));
//                jTextField3.setText(rs.getString(3));
//                jTextField12.setText(rs.getString(4));
//            } else {
//                jTextField2.setText("");
//                jTextField3.setText("");
//                jTextField12.setText("");
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, e.getMessage());
//        }
    }//GEN-LAST:event_searchCustomerfieldKeyReleased

    private void searchCustomerfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerfieldActionPerformed

    }//GEN-LAST:event_searchCustomerfieldActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11ActionPerformed

    private void jButton8FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton8FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8FocusGained

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
        model.removeRow(selectedRowIndex);
        sno = sno - 1;
    }//GEN-LAST:event_jButton8ActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        try {
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet rs = st.executeQuery("SELECT max(invoicenumber) FROM billstorage");
            if (rs.first()) {
                int inv = rs.getInt(1);
                inv = inv + 1;
                String str = String.valueOf(inv);
                jLabel22.setText(str);
            } else {
                jLabel22.setText("NONE");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_formComponentShown
    int sno = 0;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        float price = Float.parseFloat(jTextField5.getText());
        float quantity = Float.parseFloat(jTextField6.getText());
        float CGST = Float.parseFloat(jTextField10.getText());
        float SGST = Float.parseFloat(jTextField11.getText());
        float total = price * quantity;
        float totalCGST = quantity * CGST;
        float totalSGST = quantity * SGST;
        String name = jTextField4.getText();
        String productname = name.trim();
        float originalQuantity = 0;
        try {

            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT Quantity FROM product WHERE productname = '" + productname + "'");
            while (rs.next()) {
                originalQuantity = rs.getFloat(1);
            }

            float currentQty = originalQuantity - quantity;
            if (currentQty > -1) {
                sno = sno + 1;
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{sno, jTextField4.getText(), jTextField1.getText(), quantity, price, totalCGST, totalCGST, total});
                finalTotal = finalTotal + total;
                String finalTotal1 = String.valueOf(finalTotal);
                jTextField7.setText(finalTotal1);
                jTextField4.setText("");
                jTextField5.setText("");
                jTextField1.setText("");
                jTextField10.setText("");
                jTextField11.setText("");
                jTextField6.setText("");

            } else {
                JOptionPane.showMessageDialog(null, "Only " + originalQuantity + " products available now");
//                dispose();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField13KeyReleased
        if (!"".equals(jTextField13.getText()) && !"".equals(jTextField7.getText())) {
            float total1 = Float.parseFloat(jTextField7.getText());
            float amount1 = Float.parseFloat(jTextField13.getText());
            if (amount1 <= total1) {
                jTextField14.setText("" + (total1 - amount1));
            }
        }


    }//GEN-LAST:event_jTextField13KeyReleased

    private void jTextField13KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField13KeyTyped
        if (!Character.isDigit(evt.getKeyChar()))
            evt.consume();
    }//GEN-LAST:event_jTextField13KeyTyped

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked


    }//GEN-LAST:event_jButton5MouseClicked

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained

    }//GEN-LAST:event_jComboBox1FocusGained

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        String pname = jTextField4.getText();
        String productname = pname.trim();
        try {
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM product WHERE productname = '" + productname + "'");
            String selltype = jComboBox1.getSelectedItem().toString();
            if (selltype == "W") {
                if (rs.next()) {
                    jTextField5.setText(rs.getString(10));
                    jTextField10.setText(rs.getString(11));
                    jTextField11.setText(rs.getString(12));
                } else {
                    jTextField5.setText("");
                    jTextField10.setText("");
                    jTextField11.setText("");

                }
            } else {
                if (rs.next()) {
                    jTextField5.setText(rs.getString(3));
                    jTextField10.setText(rs.getString(7));
                    jTextField11.setText(rs.getString(8));
                } else {
                    jTextField5.setText("");
                    jTextField10.setText("");
                    jTextField11.setText("");
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jTextField13FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField13FocusLost
        String totalstring = jTextField13.getText();
        String amount1 = jTextField7.getText();

        if (totalstring == "") {
            jTextField14.setText(amount1);
        }


    }//GEN-LAST:event_jTextField13FocusLost

    private void searchCustomerfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchCustomerfieldFocusGained
        String name = searchCustomerfield.getText();
        String customername = name.trim();
        try{
            Connection con = connectionProvider.getCon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM customer WHERE name = '" + customername + "'");
            if (rs.next()) {
                    jTextField2.setText(rs.getString(2));
                    jTextField12.setText(rs.getString(4));
                    jTextField3.setText(rs.getString(3));


                } else {
                    jTextField2.setText("");
                    jTextField12.setText("");
                    jTextField3.setText("");
                }
        }
        catch(Exception e){
            
        }
    }//GEN-LAST:event_searchCustomerfieldFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(billingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(billingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(billingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(billingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new billingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField searchCustomerfield;
    // End of variables declaration//GEN-END:variables
}

class AutoSuggestor {

    private final JTextField textField;
    private final Window container;
    private JPanel suggestionsPanel;
    private JWindow autoSuggestionPopUpWindow;
    private String typedWord;
    private final ArrayList<String> dictionary = new ArrayList<>();
    private int currentIndexOfSpace, tW, tH;
    private DocumentListener documentListener = new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent de) {
            checkForAndShowSuggestions();
        }

        @Override
        public void removeUpdate(DocumentEvent de) {
            checkForAndShowSuggestions();
        }

        @Override
        public void changedUpdate(DocumentEvent de) {
            checkForAndShowSuggestions();
        }
    };
    private final Color suggestionsTextColor;
    private final Color suggestionFocusedColor;

    public AutoSuggestor(JTextField textField, Window mainWindow, ArrayList<String> words, Color popUpBackground, Color textColor, Color suggestionFocusedColor, float opacity) {
        this.textField = textField;
        this.suggestionsTextColor = textColor;
        this.container = mainWindow;
        this.suggestionFocusedColor = suggestionFocusedColor;
        this.textField.getDocument().addDocumentListener(documentListener);

        setDictionary(words);

        typedWord = "";
        currentIndexOfSpace = 0;
        tW = 0;
        tH = 0;

        autoSuggestionPopUpWindow = new JWindow(mainWindow);
        autoSuggestionPopUpWindow.setOpacity(opacity);

        suggestionsPanel = new JPanel();
        suggestionsPanel.setLayout(new GridLayout(0, 1));
        suggestionsPanel.setBackground(popUpBackground);

        addKeyBindingToRequestFocusInPopUpWindow();
    }

    private void addKeyBindingToRequestFocusInPopUpWindow() {
        textField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0, true), "Down released");
        textField.getActionMap().put("Down released", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {//focuses the first label on popwindow
                for (int i = 0; i < suggestionsPanel.getComponentCount(); i++) {
                    if (suggestionsPanel.getComponent(i) instanceof SuggestionLabel) {
                        ((SuggestionLabel) suggestionsPanel.getComponent(i)).setFocused(true);
                        autoSuggestionPopUpWindow.toFront();
                        autoSuggestionPopUpWindow.requestFocusInWindow();
                        suggestionsPanel.requestFocusInWindow();
                        suggestionsPanel.getComponent(i).requestFocusInWindow();
                        break;
                    }
                }
            }
        });
        suggestionsPanel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0, true), "Down released");
        suggestionsPanel.getActionMap().put("Down released", new AbstractAction() {
            int lastFocusableIndex = 0;

            @Override
            public void actionPerformed(ActionEvent ae) {//allows scrolling of labels in pop window (I know very hacky for now :))

                ArrayList<SuggestionLabel> sls = getAddedSuggestionLabels();
                int max = sls.size();

                if (max > 1) {//more than 1 suggestion
                    for (int i = 0; i < max; i++) {
                        SuggestionLabel sl = sls.get(i);
                        if (sl.isFocused()) {
                            if (lastFocusableIndex == max - 1) {
                                lastFocusableIndex = 0;
                                sl.setFocused(false);
                                autoSuggestionPopUpWindow.setVisible(false);
                                setFocusToTextField();
                                checkForAndShowSuggestions();//fire method as if document listener change occured and fired it

                            } else {
                                sl.setFocused(false);
                                lastFocusableIndex = i;
                            }
                        } else if (lastFocusableIndex <= i) {
                            if (i < max) {
                                sl.setFocused(true);
                                autoSuggestionPopUpWindow.toFront();
                                autoSuggestionPopUpWindow.requestFocusInWindow();
                                suggestionsPanel.requestFocusInWindow();
                                suggestionsPanel.getComponent(i).requestFocusInWindow();
                                lastFocusableIndex = i;
                                break;
                            }
                        }
                    }
                } else {//only a single suggestion was given
                    autoSuggestionPopUpWindow.setVisible(false);
                    setFocusToTextField();
                    checkForAndShowSuggestions();//fire method as if document listener change occured and fired it
                }
            }
        });
    }

    private void setFocusToTextField() {
        container.toFront();
        container.requestFocusInWindow();
        textField.requestFocusInWindow();
    }

    public ArrayList<SuggestionLabel> getAddedSuggestionLabels() {
        ArrayList<SuggestionLabel> sls = new ArrayList<>();
        for (int i = 0; i < suggestionsPanel.getComponentCount(); i++) {
            if (suggestionsPanel.getComponent(i) instanceof SuggestionLabel) {
                SuggestionLabel sl = (SuggestionLabel) suggestionsPanel.getComponent(i);
                sls.add(sl);
            }
        }
        return sls;
    }

    private void checkForAndShowSuggestions() {
        typedWord = getCurrentlyTypedWord();

        suggestionsPanel.removeAll();//remove previos words/jlabels that were added

        //used to calcualte size of JWindow as new Jlabels are added
        tW = 0;
        tH = 0;

        boolean added = wordTyped(typedWord);

        if (!added) {
            if (autoSuggestionPopUpWindow.isVisible()) {
                autoSuggestionPopUpWindow.setVisible(false);
            }
        } else {
            showPopUpWindow();
            setFocusToTextField();
        }
    }

    protected void addWordToSuggestions(String word) {
        SuggestionLabel suggestionLabel = new SuggestionLabel(word, suggestionFocusedColor, suggestionsTextColor, this);

        calculatePopUpWindowSize(suggestionLabel);

        suggestionsPanel.add(suggestionLabel);
    }

    public String getCurrentlyTypedWord() {//get newest word after last white spaceif any or the first word if no white spaces
        String text = textField.getText();
        String wordBeingTyped = "";
        if (text.contains(" ")) {
            int tmp = text.lastIndexOf(" ");
            if (tmp >= currentIndexOfSpace) {
                currentIndexOfSpace = tmp;
                wordBeingTyped = text.substring(text.lastIndexOf(" "));
            }
        } else {
            wordBeingTyped = text;
        }
        return wordBeingTyped.trim();
    }

    private void calculatePopUpWindowSize(JLabel label) {
        //so we can size the JWindow correctly
        if (tW < label.getPreferredSize().width) {
            tW = label.getPreferredSize().width;
        }
        tH += label.getPreferredSize().height;
    }

    private void showPopUpWindow() {
        autoSuggestionPopUpWindow.getContentPane().add(suggestionsPanel);
        autoSuggestionPopUpWindow.setMinimumSize(new Dimension(textField.getWidth(), 30));
        autoSuggestionPopUpWindow.setSize(tW, tH);
        autoSuggestionPopUpWindow.setVisible(true);

        int windowX = 0;
        int windowY = 0;

        windowX = container.getX() + textField.getX() + 5;
        if (suggestionsPanel.getHeight() > autoSuggestionPopUpWindow.getMinimumSize().height) {
            windowY = container.getY() + textField.getY() + textField.getHeight() + autoSuggestionPopUpWindow.getMinimumSize().height;
        } else {
            windowY = container.getY() + textField.getY() + textField.getHeight() + autoSuggestionPopUpWindow.getHeight();
        }

        autoSuggestionPopUpWindow.setLocation(windowX, windowY);
        autoSuggestionPopUpWindow.setMinimumSize(new Dimension(textField.getWidth(), 30));
        autoSuggestionPopUpWindow.revalidate();
        autoSuggestionPopUpWindow.repaint();

    }

    public void setDictionary(ArrayList<String> words) {
        dictionary.clear();
        if (words == null) {
            return;//so we can call constructor with null value for dictionary without exception thrown
        }
        for (String word : words) {
            dictionary.add(word);
        }
    }

    public JWindow getAutoSuggestionPopUpWindow() {
        return autoSuggestionPopUpWindow;
    }

    public Window getContainer() {
        return container;
    }

    public JTextField getTextField() {
        return textField;
    }

    public void addToDictionary(String word) {
        dictionary.add(word);
    }

    boolean wordTyped(String typedWord) {

        if (typedWord.isEmpty()) {
            return false;
        }
        //System.out.println("Typed word: " + typedWord);

        boolean suggestionAdded = false;

        for (String word : dictionary) {//get words in the dictionary which we added
            boolean fullymatches = true;
            for (int i = 0; i < typedWord.length(); i++) {//each string in the word
                if (!typedWord.toLowerCase().startsWith(String.valueOf(word.toLowerCase().charAt(i)), i)) {//check for match
                    fullymatches = false;
                    break;
                }
            }
            if (fullymatches) {
                addWordToSuggestions(word);
                suggestionAdded = true;
            }
        }
        return suggestionAdded;
    }
}

class SuggestionLabel extends JLabel {

    private boolean focused = false;
    private final JWindow autoSuggestionsPopUpWindow;
    private final JTextField textField;
    private final AutoSuggestor autoSuggestor;
    private Color suggestionsTextColor, suggestionBorderColor;

    public SuggestionLabel(String string, final Color borderColor, Color suggestionsTextColor, AutoSuggestor autoSuggestor) {
        super(string);

        this.suggestionsTextColor = suggestionsTextColor;
        this.autoSuggestor = autoSuggestor;
        this.textField = autoSuggestor.getTextField();
        this.suggestionBorderColor = borderColor;
        this.autoSuggestionsPopUpWindow = autoSuggestor.getAutoSuggestionPopUpWindow();

        initComponent();
    }

    private void initComponent() {
        setFocusable(true);
        setForeground(suggestionsTextColor);

        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                super.mouseClicked(me);

                replaceWithSuggestedText();

                autoSuggestionsPopUpWindow.setVisible(false);
            }
        });

        getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0, true), "Enter released");
        getActionMap().put("Enter released", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                replaceWithSuggestedText();
                autoSuggestionsPopUpWindow.setVisible(false);
            }
        });
    }

    public void setFocused(boolean focused) {
        if (focused) {
            setBorder(new LineBorder(suggestionBorderColor));
        } else {
            setBorder(null);
        }
        repaint();
        this.focused = focused;
    }

    public boolean isFocused() {
        return focused;
    }

    private void replaceWithSuggestedText() {
        String suggestedWord = getText();
        String text = textField.getText();
        String typedWord = autoSuggestor.getCurrentlyTypedWord();
        String t = text.substring(0, text.lastIndexOf(typedWord));
        String tmp = t + text.substring(text.lastIndexOf(typedWord)).replace(typedWord, suggestedWord);
        textField.setText(tmp + " ");
    }
}
